AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  lecture7

  Sample SAM Template for lecture7

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  # 巨大になってきたらAWS::Serverless::Applicationで分割する
  PreTokenGenerationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PreTokenGenerationFunction
      Handler: app.lambda_handler
      Runtime: python3.13
      CodeUri: services/Cognito/PreTokenGeneration/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RoleAccessTable
      Environment:
        Variables:
          ROLE_TABLE_NAME: !Ref RoleAccessTable
  PreTokenInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreTokenGenerationFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ProtectedUserPool
      LambdaConfig:
        PreTokenGeneration: !GetAtt PreTokenGenerationFunction.Arn
      AutoVerifiedAttributes:
        - email
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: admin_only
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Schema:
        - Name: role
          AttributeDataType: String
          Mutable: true
          Required: false
          StringAttributeConstraints:
            MinLength: "36"
            MaxLength: "36"
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ProtectedAppClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
  RoleAccessTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: RoleAccessTable
      PrimaryKey:
        Name: role_id
        Type: String
  ProtectedApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ProtectedApi
      StageName: prod
      Auth:
        Authorizers:
          MyLambdaRequestAuth:
            FunctionArn: !GetAtt LambdaTokenAuthorizer.Arn
        DefaultAuthorizer: MyLambdaRequestAuth
  LambdaTokenAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LambdaTokenAuthorizer
      CodeUri: services/Authorizer/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref RoleAccessTable
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
      Environment:
        Variables:
          ROLE_TABLE_NAME: !Ref RoleAccessTable
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
      Events: {}  # API Gateway 経由では呼ばれない
  LambdaTokenAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaTokenAuthorizer.Arn
      Principal: apigateway.amazonaws.com
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: CommonLayer
      Description: Layer for Python requirements
      ContentUri: layers/CommonLayer
      CompatibleRuntimes:
        - python3.13
    Metadata:
      BuildMethod: python3.13

  ### RoleService ###
  ListRolesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ListRolesFunction
      CodeUri: services/RoleService/ListRoles/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref RoleAccessTable
      Environment:
        Variables:
          ROLE_TABLE_NAME: !Ref RoleAccessTable
      Events:
        GetRoles:
          Type: Api
          Properties:
            RestApiId: !Ref ProtectedApi
            Path: /roles
            Method: GET
            Auth:
              Authorizer: MyLambdaRequestAuth
  CreateRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateRoleFunction
      CodeUri: services/RoleService/CreateRole/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RoleAccessTable
      Environment:
        Variables:
          ROLE_TABLE_NAME: !Ref RoleAccessTable
      Events:
        CreateRole:
          Type: Api
          Properties:
            RestApiId: !Ref ProtectedApi
            Path: /roles
            Method: POST
            Auth:
              Authorizer: MyLambdaRequestAuth
        PutRole:
          Type: Api
          Properties:
            RestApiId: !Ref ProtectedApi
            Path: /roles
            Method: PUT
            Auth:
              Authorizer: MyLambdaRequestAuth
  UpdateRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UpdateRoleFunction
      CodeUri: services/RoleService/UpdateRole/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RoleAccessTable
      Environment:
        Variables:
          ROLE_TABLE_NAME: !Ref RoleAccessTable
      Events:
        UpdateRole:
          Type: Api
          Properties:
            RestApiId: !Ref ProtectedApi
            Path: /roles/{role_id}
            Method: POST
            Auth:
              Authorizer: MyLambdaRequestAuth
        PatchRole:
          Type: Api
          Properties:
            RestApiId: !Ref ProtectedApi
            Path: /roles/{role_id}
            Method: PATCH
            Auth:
              Authorizer: MyLambdaRequestAuth
  GetRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetRoleFunction
      CodeUri: services/RoleService/GetRole/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref RoleAccessTable
      Environment:
        Variables:
          ROLE_TABLE_NAME: !Ref RoleAccessTable
      Events:
        GetRole:
          Type: Api
          Properties:
            RestApiId: !Ref ProtectedApi
            Path: /roles/{role_id}
            Method: GET
            Auth:
              Authorizer: MyLambdaRequestAuth
  DeleteRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteRoleFunction
      CodeUri: services/RoleService/DeleteRole/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RoleAccessTable
      Environment:
        Variables:
          ROLE_TABLE_NAME: !Ref RoleAccessTable
      Events:
        DeleteRole:
          Type: Api
          Properties:
            RestApiId: !Ref ProtectedApi
            Path: /roles/{role_id}
            Method: DELETE
            Auth:
              Authorizer: MyLambdaRequestAuth

  ### UserService ###
  ListUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ListUsersFunction
      CodeUri: services/UserService/ListUsers/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
              Resource: "*"
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
      Events:
        ListUsers:
          Type: Api
          Properties:
            Method: GET
            Path: /users
            RestApiId: !Ref ProtectedApi
            Auth:
              Authorizer: MyLambdaRequestAuth
  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateUserFunction
      CodeUri: services/UserService/CreateUser/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:AdminUpdateUserAttributes
              Resource: "*"
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
      Events:
        CreateUser:
          Type: Api
          Properties:
            Method: POST
            Path: /users
            RestApiId: !Ref ProtectedApi
            Auth:
              Authorizer: MyLambdaRequestAuth
        PutUser:
          Type: Api
          Properties:
            Method: PUT
            Path: /users
            RestApiId: !Ref ProtectedApi
            Auth:
              Authorizer: MyLambdaRequestAuth
  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetUserFunction
      CodeUri: services/UserService/GetUser/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
              Resource: "*"
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
      Events:
        GetUser:
          Type: Api
          Properties:
            Method: GET
            Path: /users/{username}
            RestApiId: !Ref ProtectedApi
            Auth:
              Authorizer: MyLambdaRequestAuth
  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UpdateUserFunction
      CodeUri: services/UserService/UpdateUser/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminUpdateUserAttributes
              Resource: "*"
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
      Events:
        UpdateUser:
          Type: Api
          Properties:
            Method: POST
            Path: /users/{username}
            RestApiId: !Ref ProtectedApi
            Auth:
              Authorizer: MyLambdaRequestAuth
        PatchUser:
          Type: Api
          Properties:
            Method: PATCH
            Path: /users/{username}
            RestApiId: !Ref ProtectedApi
            Auth:
              Authorizer: MyLambdaRequestAuth
  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteUserFunction
      CodeUri: services/UserService/DeleteUser/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminDeleteUser
              Resource: "*"
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
      Events:
        DeleteUser:
          Type: Api
          Properties:
            Method: DELETE
            Path: /users/{username}
            RestApiId: !Ref ProtectedApi
            Auth:
              Authorizer: MyLambdaRequestAuth

  ### TodoService ###
  TodoListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/TodoService/ListTodos
      Handler: app.lambda_handler
      Runtime: python3.13
      FunctionName: ListTodos
      Architectures:
        - x86_64
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          TODO_TABLE_NAME: !Ref TodoTable
      Events:
        ListTodo:
          Type: Api
          Properties:
            Path: /todos
            Method: get
            RestApiId: !Ref ProtectedApi
            Auth:
              Authorizer: MyLambdaRequestAuth
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TodoTable
  TodoCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/TodoService/CreateTodo
      Handler: app.lambda_handler
      Runtime: python3.13
      FunctionName: CreateTodo
      Architectures:
        - x86_64
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          TODO_TABLE_NAME: !Ref TodoTable
      Events:
        CreateTodo:
          Type: Api
          Properties:
            Path: /todos
            Method: put
            RestApiId: !Ref ProtectedApi
            Auth:
              Authorizer: MyLambdaRequestAuth
        CreateTodoPost:
          Type: Api
          Properties:
            Path: /todos
            Method: post
            RestApiId: !Ref ProtectedApi
            Auth:
              Authorizer: MyLambdaRequestAuth
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTable
  TodoGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/TodoService/GetTodo
      Handler: app.lambda_handler
      Runtime: python3.13
      FunctionName: GetTodo
      Architectures:
        - x86_64
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          TODO_TABLE_NAME: !Ref TodoTable
      Events:
        GetTodo:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: get
            RestApiId: !Ref ProtectedApi
            Auth:
              Authorizer: MyLambdaRequestAuth
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TodoTable
  TodoDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/TodoService/DeleteTodo
      Handler: app.lambda_handler
      Runtime: python3.13
      FunctionName: DeleteTodo
      Architectures:
        - x86_64
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          TODO_TABLE_NAME: !Ref TodoTable
      Events:
        DeleteTodo:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: delete
            RestApiId: !Ref ProtectedApi
            Auth:
              Authorizer: MyLambdaRequestAuth
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTable
  TodoUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/TodoService/UpdateTodo
      Handler: app.lambda_handler
      Runtime: python3.13
      FunctionName: UpdateTodo
      Architectures:
        - x86_64
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          TODO_TABLE_NAME: !Ref TodoTable
      Events:
        UpdateTodoPatch:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: patch
            RestApiId: !Ref ProtectedApi
            Auth:
              Authorizer: MyLambdaRequestAuth
        UpdateTodoPut:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: put
            RestApiId: !Ref ProtectedApi
            Auth:
              Authorizer: MyLambdaRequestAuth
        UpdateTodoPost:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: post
            RestApiId: !Ref ProtectedApi
            Auth:
              Authorizer: MyLambdaRequestAuth
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTable
  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: todo_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH  # Partition key
        - AttributeName: todo_id
          KeyType: RANGE # Sort key
      Tags:
        - Key: service
          Value: todo

# Outputs:
